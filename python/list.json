{
  "section": "List",
  "tidyList": [
  {
    "title": "str to int",
    "codebox": "test_list = ['1', '4', '3', '6', '7']\n# using list comprehension to\ntest_list = [int(i) for i in test_list]\n# using map()\ntest_list = list(map(int, test_list))\nprint (\"Modified list is : \" + str(test_list))\n#output:\n"
  },
  {
    "title": "Count the occurrences of a value in an list",
    "codebox": "lst = [8, 6, 8, 10, 8, 20, 10, 8, 8]\nx = 8\ncount = 0\n    for ele in lst:\n        if (ele == x):\n            count = count +\nprint('{} has occurred {} times'.format(x, countX(lst, x)))\n#output:8 has occurred 5 times\n"
  },
  {
    "title": "Count the occurrences of List elements",
    "codebox": "my_list =[1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4, 4, 4, 2, 2, 2, 2]\nfreq = {}\nfor items in my_list:\n    freq[items] = my_list.count(items)\n    for key, value in freq.items():\n        print (\"% d : % d\"%(key, value))\n#output:\n # 1 :  5\n # 5 :  2\n # 3 :  3\n # 4 :  3\n # 2 :  4\n"
  },
  {
    "title": "Create cumulative sum of a List",
    "codebox": "lists = [10, 20, 30, 40, 50]\nnew = []\n   cumsum = 0\n   for element in l:\n      cumsum += element\n      new.append(cumsum)\nprint (new)\n#output:[10, 30, 60, 100, 150]\n"
  },
  {
    "title": "Create an list of numbers in the given range",
    "codebox": "r1, r2 = -1, 1\nres = []\nif (r1 == r2):\n    res.append(r1)\nelse:\n    while(r1 < r2+1 ):\n        res.append(r1)\n        r1 += 1\nprint(res)\noutput:[-1, 0, 1]\n\n"
  },
  {
    "title": "Empty an list",
    "codebox": "a =[]\n"
  },
  {
    "title": "Find the closest number from an List",
    "codebox": "lst = [3.64, 5.2, 9.42, 9.35, 8.5, 8]\nK = 9.1\nclosest = lst[min(range(len(lst)), key = lambda i: abs(lst[i]-K))]\nprint(closest)\n#output: 9.35\n"
  },
  {
    "title": "Find the length of the longest string in a list",
    "codebox": "test_list = ['this', 'is', 'a', 'example']\nprint(\"The original list : \" + str(test_list))\nres = max(test_list, key = len)\nprint(\"Maximum length string is : \" + res)\n#output: example\n\n"
  },
  {
    "title": "Find the length of the smallest string in a list",
    "codebox": "test_list = ['this', 'is', 'a', 'example']\nprint(\"The original list : \" + str(test_list))\nres = min(test_list, key = len)\nprint(\"Maximum length string is : \" + res)\n#output: a\n"
  },
  {
    "title": "Find the maximum item of a list",
    "codebox": "list1 = [456, 700, 200]\nprint ( max(list1)\n#output: 700\n"
  },
  {
    "title": "Find the minimum item of a list",
    "codebox": "list1 = [456, 700, 200]\nprint ( max(list1)\n#output: 200\n\n"
  },
  {
    "title": "Flatten an array",
    "codebox": "import numpy as np\ny = np.array([[2,3], [4,5]])\ny.flatten()\nprint (y)\n#output:[2, 3, 4, 5]\n"
  },
  {
    "title": " Get the average of a list",
    "codebox": "from statistics import mean\nlst = [15, 9, 55, 41, 35, 20, 62, 49]\naverage = mean(lst)\nprint(\"Average of the list =\", round(average, 2))\n"
  },
  {
    "title": "Get the intersection of lists",
    "codebox": "lst1 = [4, 9, 1, 17, 11, 26, 28, 54, 69]\nlst2 = [9, 9, 74, 21, 45, 11, 63, 28, 26]\nlst3 = [value for value in lst1 if value in lst2]\nprint(lst3)\n#output:[9, 11, 26, 28]\n"
  },
  {
    "title": "Get the sum of all numbers in a list",
    "codebox": "numbers = [1,2,3,4,5,1,4,5]\n# start parameter is not provided\nSum = sum(numbers)\nprint(Sum)\n#output:25\n"
  },
  {
    "title": "Get the unique values of a list",
    "codebox": "list1 = [10, 20, 10, 30, 40, 40]\nunique_list = []\nfor x in list1:\n    if x not in unique_list:\n        unique_list.append(x)\nprint(unique_list)\n#output [10, 20, 30, 40]\n"
  },
  {
    "title": "Get union of arrays",
    "codebox": "lst1 = [23, 15, 2, 14, 14, 16, 20 ,52]\nlst2 = [2, 48, 15, 12, 26, 32, 47, 54]\nfinal_list = list(set(lst1) | set(lst2))\nprint(final_list)\n#output: [32, 2, 12, 14, 15, 16, 48, 47, 20, 52, 54, 23, 26]\n"
  },
  {
    "title": " Group an list of objects by a key",
    "codebox": "from operator import itemgetter\nfrom itertools import groupby\nlist = [[\"A\",0], [\"B\",1], [\"C\",0], [\"D\",2], [\"E\",2]]\nlist.sort(key=itemgetter(1))\n\ngroup = [[x for x,y in g]\n       for k,g in  groupby(list,key=itemgetter(1))]\n\nprint (group)\n#output: [['A', 'C'], ['B'], ['D', 'E']]\n"
  },
  {
    "title": "Merge two lists (with dupication)",
    "codebox": "lst1 = [23, 15, 2, 14, 14, 16, 20 ,52]\nlst2 = [2, 48, 15, 12, 26, 32, 47, 54]\nfinal_list = lst1 + lst2\nprint(final_list)\n#output: [23, 15, 2, 14, 14, 16, 20, 52, 2, 48, 15, 12, 26, 32, 47, 54]\n"
  },
  {
    "title": "Partition an array based on a condition",
    "codebox": "# files = ['.jpg','.jpeg','.gif','.bmp','.png']\n# images = [f for f in files if files[f]==]\n# anims  = [f for f in files if f[2].lower() not in files]\n# print(images)\n"
  },
  {
    "title": "Remove falsy values from list",
    "codebox": "list1 = [[], [], [], [], [], 'test', 'test2', [], 'test3']\nlist2 = [x for x in list1 if x != []]\nprint(list2)\noutput:['test', 'test2', 'test3']\n"
  },
  {
    "title": " Shuffle a list",
    "codebox": "import random\nnumber_list = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70]\nrandom.shuffle(number_list)\nprint(\"List after shuffle:\", number_list)\n#output:[7, 70, 35, 42, 21, 28, 14, 56, 49, 63]\n"
  },
  {
    "title": " Sort a list of numbers",
    "codebox": "numbers = [1, 3, 4, 2]\nnumbers.sort()\nprint(numbers)\n#desending order\nnumbers.sort(reverse = True)\n#output:[1, 2, 3, 4]\n"
  },
  {
    "title": " Split a list into chunks",
    "codebox": "my_list = [1, 2, 3, 4, 5,\n\t\t\t6, 7, 8, 9]\nn = 4\nfinal = [my_list[i * n:(i + 1) * n] for i in range((len(my_list) + n - 1) // n )]\nprint (final)\n"
  },
  {
    "title": "Check if all element elements are equal to a given value",
    "codebox": "lst = ['test', 'test', 'test', 'test', ]\nele = \"test\"\nchk = True\nfor item in lst:\n    if ele != item:\n        chk = False\n        break;\nif (chk == True): print(\"Equal\")\nelse: print(\"Not equal\")\n#output Equal\n\n"
  },
  {
    "title": "check if list is subset of other",
    "codebox": "one = [1,2,3,4,5]\ntwo = [1,2]\nresult = set(x in one for x in two)\nflag = 0\nfor ans in result:\n    if ans == False:\n        flag=1\nprint (\"sub list : \" + str(two))\nif flag==0:\n    print(\"Yes, list is subset of other.\")\nelse:\n    print(\"No, list is not subset of other.\")\n#output Yes, list is subset of other\n\n"
  }
]
}
